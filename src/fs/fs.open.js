//打开文件
//fs.open(path[, flags[, mode]], callback)
// 当 flag 选项采用字符串时，则以下标志均可用：
// 'a': 打开文件用于追加。 如果文件不存在，则创建该文件。
// 'ax': 类似于 'a'，但如果路径存在，则失败。
// 'a+': 打开文件用于读取和追加。 如果文件不存在，则创建该文件。
// 'ax+': 类似于 'a+'，但如果路径存在，则失败。
// 'as': 打开文件用于追加（在同步模式中）。 如果文件不存在，则创建该文件。
// 'as+': 打开文件用于读取和追加（在同步模式中）。 如果文件不存在，则创建该文件。
// 'r': 打开文件用于读取。 如果文件不存在，则会发生异常。
// 'r+': 打开文件用于读取和写入。 如果文件不存在，则会发生异常。
// 'rs+': 打开文件用于读取和写入（在同步模式中）。 指示操作系统绕过本地的文件系统缓存。
// 这对于在 NFS 挂载上打开文件时非常有用，因为它可以跳过可能过时的本地缓存。 它对 I/O 性能有非常实际的影响，因此不建议使用此标志（除非真的需要）。
// 这不会把 fs.open() 或 fsPromises.open() 变成同步的阻塞调用。 如果需要同步的操作，则应使用 fs.openSync() 之类的。
// 'w': 打开文件用于写入。 如果文件不存在则创建文件，如果文件存在则截断文件。
// 'wx': 类似于 'w'，但如果路径存在，则失败。
// 'w+': 打开文件用于读取和写入。 如果文件不存在则创建文件，如果文件存在则截断文件。
// 'wx+': 类似于 'w+'，但如果路径存在，则失败。

const fs = require('fs').promises;
fs.open(__dirname + '/edit1.text','r+').then( res =>{
    console.log(res)
    // FileHandle {
    //   close: [Function: close],
    //   [Symbol(kHandle)]: FileHandle { fd: 27 }
    // }
})